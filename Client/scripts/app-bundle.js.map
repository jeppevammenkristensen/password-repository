{"version":3,"sources":["environment.ts","app.ts","main.ts","resources/index.ts"],"names":[],"mappings":";;;IAAA,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;QACb,GAAG,EAAG,2BAA2B;KAClC,CAAC;;;;;;;;;;;;;;ICCF,IAAa,GAAG;QAKd,aAAoB,MAAkB;YAAlB,WAAM,GAAN,MAAM,CAAY;YAHtC,kBAAa,GAAa,IAAI,CAAC;YAyC/B,YAAO,GAAG,cAAc,CAAC;YArCvB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,MAAM;gBAC1B,MAAM,CAAC,wBAAwB,EAAE,CAAC;YACpC,CAAC,CAAC,CAAA;QACJ,CAAC;QAED,sBAAQ,GAAR;QAMA,CAAC;QAED,oBAAM,GAAN;YAAA,iBAYC;YAXC,IAAI,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;YAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACnD,QAAQ,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAA;YACzD,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAI,qBAAW,CAAC,GAAG,sBAAmB,EAAE;gBAC9D,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,QAAQ;aACf,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAY,EAAlB,CAAkB,CAAC;iBAC7B,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAlB,CAAkB,CAAC;iBAC7B,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,KAAK,CAAC,GAAG,CAAC,EAAV,CAAU,CAAC,CAAC;QAC9B,CAAC;QAED,qBAAO,GAAP;YACG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAI,qBAAW,CAAC,GAAG,0BAAqB,IAAI,CAAC,UAAY,EAAE;gBACjF,MAAM,EAAE,KAAK;aACd,CAAC;iBACD,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAO,EAAb,CAAa,CAAC;iBACxB,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,KAAK,CAAC,CAAC,CAAC,EAAR,CAAQ,CAAC,CAAC;QACxB,CAAC;QAKH,UAAC;IAAD,CA5CA,AA4CC,IAAA;IA5CY,GAAG;QADf,8BAAU,EAAE;yCAMiB,iCAAU;OAL3B,GAAG,CA4Cf;IA5CY,kBAAG;;;;;ICDV,OAAQ,CAAC,MAAM,CAAC;QACpB,QAAQ,EAAE;YACR,gBAAgB,EAAE,KAAK;SACxB;KACF,CAAC,CAAC;IAEH,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAdD,8BAcC;;;;;ICtBD,mBAA0B,MAA8B;IAExD,CAAC;IAFD,8BAEC","file":"app-bundle.js","sourcesContent":["export default {\r\n  debug: true,\r\n  testing: true,\r\n  api : 'http://localhost:5000/api'\r\n};\r\n","import { HttpClient, json } from 'aurelia-fetch-client';\r\nimport { autoinject } from 'aurelia-framework';\r\nimport environment from './environment';\r\n\r\n@autoinject()\r\nexport class App {\r\n\r\n  uploadedFiles: FileList = null;\r\n  uploadedId : string;\r\n\r\n  constructor(private client: HttpClient) {\r\n    this.client.configure(config => {\r\n      config.useStandardConfiguration();\r\n    })\r\n  }\r\n\r\n  attached() {\r\n    // return this.client.fetch(`${environment.api}/passwords`)\r\n    //   .then(response => response.json<string[]>())\r\n    //   .then(x => alert(x))\r\n    //   .catch(rej => alert(rej));     \r\n\r\n  }\r\n\r\n  upload() {\r\n    var formData = new FormData();\r\n    for (let i = 0; i < this.uploadedFiles.length; i++) {\r\n      formData.append('uploadedFiles', this.uploadedFiles[0])\r\n    }\r\n\r\n    return this.client.fetch(`${environment.api}/passwords/upload`, {\r\n      method: 'post',\r\n      body: formData\r\n    }).then(x => x.json<string[]>())\r\n      .then(x => this.uploadedId[0])\r\n      .catch(rej => alert(rej));      \r\n  }\r\n\r\n  process(){\r\n     return this.client.fetch(`${environment.api}/password/process/${this.uploadedId}`, {\r\n       method: 'get',       \r\n     })\r\n     .then(x => x.json<any>())\r\n     .then(x => alert(x));\r\n  }\r\n\r\n\r\n\r\n  message = 'Hello World!';\r\n}\r\n","import {Aurelia} from 'aurelia-framework'\r\nimport environment from './environment';\r\n\r\n//Configure Bluebird Promises.\r\n(<any>Promise).config({\r\n  warnings: {\r\n    wForgottenReturn: false\r\n  }\r\n});\r\n\r\nexport function configure(aurelia: Aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .feature('resources');\r\n\r\n  if (environment.debug) {\r\n    aurelia.use.developmentLogging();\r\n  }\r\n\r\n  if (environment.testing) {\r\n    aurelia.use.plugin('aurelia-testing');\r\n  }\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n","import {FrameworkConfiguration} from 'aurelia-framework';\r\n\r\nexport function configure(config: FrameworkConfiguration) {\r\n  //config.globalResources([]);\r\n}\r\n"],"sourceRoot":"../src"}