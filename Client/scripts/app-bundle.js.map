{"version":3,"sources":["environment.ts","app.ts","main.ts","resources/index.ts"],"names":[],"mappings":";;;IAAA,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;QACb,GAAG,EAAG,2BAA2B;KAClC,CAAC;;;;;;;;;;;;;;ICCF,IAAa,GAAG;QAEd,aAAoB,MAAmB;YAAnB,WAAM,GAAN,MAAM,CAAa;YAYvC,YAAO,GAAG,cAAc,CAAC;QAVzB,CAAC;QAED,sBAAQ,GAAR;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAI,qBAAW,CAAC,GAAG,eAAY,CAAC;iBACrD,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAY,EAAzB,CAAyB,CAAC;iBAC3C,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,KAAK,CAAC,CAAC,CAAC,EAAR,CAAQ,CAAC;iBACnB,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,KAAK,CAAC,GAAG,CAAC,EAAV,CAAU,CAAC,CAAC;QAE9B,CAAC;QAGH,UAAC;IAAD,CAfA,AAeC,IAAA;IAfY,GAAG;QADf,8BAAU,EAAE;yCAGkB,iCAAU;OAF5B,GAAG,CAef;IAfY,kBAAG;;;;;ICDV,OAAQ,CAAC,MAAM,CAAC;QACpB,QAAQ,EAAE;YACR,gBAAgB,EAAE,KAAK;SACxB;KACF,CAAC,CAAC;IAEH,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAdD,8BAcC;;;;;ICtBD,mBAA0B,MAA8B;IAExD,CAAC;IAFD,8BAEC","file":"app-bundle.js","sourcesContent":["export default {\n  debug: true,\n  testing: true,\n  api : 'http://localhost:5001/api'\n};\n","import {HttpClient} from 'aurelia-fetch-client';\nimport {autoinject} from 'aurelia-framework';\nimport environment from './environment'; \n\n@autoinject()\nexport class App {\n\n  constructor(private client : HttpClient){\n     \n  }\n\n  attached() {\n    return this.client.fetch(`${environment.api}/passwords`)\n      .then(response => response.json<string[]>())\n      .then(x => alert(x))\n      .catch(rej => alert(rej));     \n     \n  }\n\n  message = 'Hello World!';\n}\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../src"}